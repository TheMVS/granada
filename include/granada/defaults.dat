#ifdef _CACHE_NAMESPACES
////
// OAuth 2.0 entities cache namespaces
//
// OAuth 2.0 Client namespace
DAT(oauth2_client_value,                "oauth2.client:value:")
// OAuth 2.0 Code namespace
DAT(oauth2_code_value,                  "oauth2.code:value:")
// OAuth 2.0 User namespace
DAT(oauth2_user_value,                  "oauth2.user:value:")

DAT(oauth2_authorization,               "oauth2.authorization:")

////
// Session namespaces
//
DAT(session_value,                      "session:value:")
DAT(session_data,                       "session:data:")
DAT(session_roles,                      "session:roles:")

////
// Plugin namespaces
//
DAT(plugin_loader_value,				"plugin.loader:value:")
DAT(plugin_store,                       "plugin:store:")
DAT(plugin_value,                       "plugin:value:")
DAT(plugin_handler_value,               "plugin.handler:value:")
DAT(plugin_event_value,                 "plugin.event:value:")
DAT(plugin_extended,					"plugin.extended:")


#endif // _CACHE_NAMESPACES


#ifdef _ENTITY_KEYS
////
// OAuth 2.0 constants
//
// OAuth 2.0 Client keys
DAT(oauth2_client_application_name,     "application.name")
DAT(oauth2_client_id,                   "client.id")
DAT(oauth2_client_client_type,          "client.type")
DAT(oauth2_client_creation_time,        "creation.time")
DAT(oauth2_client_key,                  "key")
DAT(oauth2_client_redirect_uris,        "redirect.uris")
DAT(oauth2_client_roles,                "roles")
DAT(oauth2_client_username,             "username")
// OAuth 2.0 Code keys
DAT(oauth2_code_client_id,              "client.id")
DAT(oauth2_code_code,                   "code")
DAT(oauth2_code_creation_time,          "creation.time")
DAT(oauth2_code_roles,                  "roles")
DAT(oauth2_code_username,               "username")
// OAuth 2.0 User keys
DAT(oauth2_user_creation_time,          "creation.time")
DAT(oauth2_user_key,                    "key")
DAT(oauth2_user_roles,                  "roles")
DAT(oauth2_user_username,               "username")
DAT(oauth2_session_role,                "__OAUTH2")
DAT(oauth2_session_role_username,       "oauth2.user:username")

////
// Session entities keys
//
DAT(session_cookie,                     "cookie")
DAT(session_json,                       "json")
DAT(session_query,                      "query")
DAT(session_clean_extra_timeout,        "session_clean_extra_timeout")
DAT(session_clean_frequency,            "session_clean_frequency")
DAT(session_set_cookie,                 "Set-Cookie")
DAT(session_timeout,                    "session_timeout")
DAT(session_token_support,              "session_token_support")
DAT(session_token_label,                "session_token_label")
DAT(session_token_length,               "session_token_length")
DAT(session_token,                      "token")
DAT(session_update_time,                "update.time")

DAT(oauth2_client_value_namespace,      "oauth2_client_value_namespace")
DAT(oauth2_client_id_length,            "oauth2_client_id_length")
DAT(oauth2_user_value_namespace,        "oauth2_user_value_namespace")
DAT(oauth2_code_length,                 "oauth2_code_length")
DAT(oauth2_code_value_namespace,        "oauth2_code_value_namespace")

DAT(oauth2_authorizing_login_template,  "oauth2_authorizing_login_template")
DAT(oauth2_authorizing_message_template,"oauth2_authorizing_message_template")
DAT(oauth2_logout_template,             "oauth2_logout_template")
DAT(oauth2_authorizing_error_template,  "oauth2_authorizing_error_template")
DAT(oauth2_authorize_uri,               "oauth2_authorize_uri")
DAT(oauth2_logout_uri,                  "oauth2_logout_uri")
DAT(oauth2_use_refresh_token,           "use_refresh_token")

DAT(oauth2_info_uri,                    "oauth2_info_uri")

DAT(oauth2_authorization_form_action,   "action")

DAT(oauth2_authorization_namespace,     "oauth2_authorization_namespace")

////
// Cache entities keys
//
DAT(redis_cache_driver_address,         "redis_cache_driver_address")
DAT(redis_cache_driver_port,            "redis_cache_driver_port")

////
// Http parser
//
DAT(http_parser_cookie,                 "Cookie")
DAT(http_parser_boundary_delimiter,     "; boundary=----")
DAT(http_parser_property_name_label,    "name")
DAT(http_parser_property_value_label,   "value")

DAT(_true,                              "true")

////
// Plugin entities keys
//
DAT(plugin_id,                          "plugin_id")
DAT(plugin_event,                       "event")
DAT(plugin_handler_id,					"id")
DAT(plugin_handler_last_use,			"last.use")
DAT(plugin_handler_runner_last_use,		"runner.last.use")
DAT(plugin_handler_repositories,		"repositories")
DAT(plugin_parameter_plugin_handler_id,	"__PLUGIN_HANDLER_ID")
DAT(plugin_parameter_plugin_id,			"__PLUGIN_ID")
DAT(plugin_parameter_id,				"id")
DAT(plugin_parameter_event_name,		"event_name")
DAT(plugin_parameter_key,				"key")
DAT(plugin_parameter_value,				"value")
DAT(plugin_parameter_to_ids,			"to_ids")
DAT(plugin_parameter_from,				"from")
DAT(plugin_parameter_data,				"data")
DAT(plugin_header,						"header")
DAT(plugin_header_id,					"id")
DAT(plugin_header_active,		        "active")
DAT(plugin_header_events,				"events")
DAT(plugin_header_extends,				"extends")
DAT(plugin_header_loader,				"loader")
DAT(plugin_loader_load,					"load")
DAT(plugin_loader_events,				"events")
DAT(plugin_configuration,				"configuration")
DAT(plugin_script,						"script")
DAT(plugin_parameter_configuration,		"__PLUGIN_CONFIGURATION")
DAT(plugin_init_ph_after_event,			"plugin_init_ph_after_event")
DAT(plugin_bytes_limit,					"plugin_bytes_limit")
DAT(plugin_runner_use_frequency_limit,	"plugin_runner_use_frequency_limit")
DAT(plugin_handler_use_frequency_limit,	"plugin_handler_use_frequency_limit")
DAT(plugin_extended_ids,				"extended.ids")
DAT(plugin_extended,					"extended")
DAT(plugin_event_ids,					"ids")
DAT(plugin_event_loader,				"loader")
DAT(plugin_event_script,				"script")
DAT(plugin_role_select,					"plugin.select")
DAT(plugin_role_insert,					"plugin.insert")
DAT(plugin_role_update,					"plugin.update")
DAT(plugin_role_delete,					"plugin.delete")
DAT(plugin_allow_client_to_send_messages,"allow_client_to_send_messages")
DAT(plugin_allow_client_to_fire_events,	"allow_client_to_fire_events")
DAT(plugin_allow_client_to_run_plugins,	"allow_client_to_run_plugins")
DAT(plugin_allow_client_to_run_commands,"allow_client_to_run_commands")
DAT(plugin_userfiles_directory,			"plugin_userfiles_directory")
DAT(plugin_directory,		            "plugin_directory")
DAT(plugin_publicfiles_directory,		"plugin_publicfiles_directory")

#endif // _ENTITY_KEYS


#ifdef _NONCE_LENGTHS
////
// OAuth 2.0 entities nonce lengths
//
DAT(oauth2_client_id,                   16)
DAT(oauth2_code,                        64)

////
// Session entities nonce lengths
//
// Default token length. This default value is taken in case "session_default_token_length" property is not found.
DAT(session_token,                      64)
#endif // _NONCE_LENGTHS

#ifdef _DEFAULT_STRINGS
// Default token name, the cookie name containing the token or, in case of
// using POST or GET, the key name of the token value.
// This default value is taken in case "session_token_label" property is not found.
DAT(session_token_support,              "cookie")
DAT(session_second_token_support,       "json")
DAT(session_token_label,                "token")

DAT(oauth2_authorize_uri,               "auth")
DAT(oauth2_logout_uri,                  "logout")
DAT(oauth2_info_uri,                    "info")
DAT(oauth2_use_refresh_token,           "false")

// Address used in case "redis_cache_driver_address" property is not provided.
DAT(redis_cache_redis_address,          "127.0.0.1")
// Port used in case "redis_cache_driver_port" property is not provided.
DAT(redis_cache_redis_port,             "6379")

////
// Plugin
//
DAT(plugin_eager_load,                  "eager")
DAT(plugin_error,						"error")
DAT(plugin_error_description,			"error_description")
DAT(plugin_lazy_load,                   "lazy")
DAT(plugin_store,						"store")
DAT(plugin_value,						"value")
DAT(plugin_init_ph_event,				"init-ph")
DAT(plugin_add_event,					"plugin-add")
DAT(plugin_configuration_load_event,	"plugin-configuration-load")
DAT(plugin_run_failure_event,			"plugin-run-failure")
DAT(plugin_extended_true,				"TRUE")
DAT(plugin_server_directory_name,		"server")
DAT(plugin_configuration_file_name,		"configuration")
DAT(plugin_configuration_file_extension,"json")
DAT(plugin_header_file_extension,		"json")
DAT(plugin_user_directory,				"user_directory")
DAT(plugin_userfiles_directory,			"userfiles")
DAT(plugin_directory,		            "plugins")
DAT(plugin_publicfiles_directory,		"publicfiles")
DAT(plugin_before,						"before")
DAT(plugin_in_process,					"in-process")
DAT(plugin_after,						"after")
DAT(plugin_command,						"command")
DAT(plugin_command_reset,				"RESET")
DAT(plugin_command_stop,				"STOP")
DAT(plugin_properties_true,				"TRUE")
DAT(plugin_properties_false,			"FALSE")
DAT(plugin_function_stop_plugin_handler,"StopPluginHandler")

DAT(runner_error,						"error")
DAT(runner_error_description,			"error_description")
#endif // _DEFAULT_STRINGS

#ifdef _DEFAULT_NUMBERS
////
// Session default numbers
//
// Default session timeout seconds, by default one day = 86400 seconds.
// This default value is taken in case "session_timeout" property is not found.
DAT(session_timeout,                     86400)

// Default frequency in seconds the CleanSessions function will be executed.
// This default value is taken in case "session_clean_frequency" property is not found.
// By default every hour = 3600 seconds.
DAT(session_clean_sessions_frequency,    3600)
// This default value is taken in case "session_clean_extra_timeout" property is not found.
DAT(session_session_clean_extra_timeout, 0)

// Default maximum bytes a Plug-in Hadler can load.
// 10 MB.
DAT(plugin_bytes_limit, 10000000)

// The minimum time a Plug-ins have to wait
// between running its scrip/executable
// in milliseconds.
// default is 20 ms;
DAT(plugin_runner_use_frequency_limit, 	20)

DAT(plugin_handler_use_frequency_limit,	0)

#endif // _DEFAULT_NUMBERS


#ifdef _DEFAULT_ERRORS
DAT(plugin_malformed_parameters, 		"malformed_parameters")
DAT(plugin_missing_parameter,			"missing_parameter")
DAT(plugin_unknown_command, 			"unknown_command")
DAT(plugin_forbidden_command,			"forbidden_command")
DAT(plugin_undefined_plugin,			"undefined_plugin")
DAT(plugin_server_error,				"server_error")
DAT(plugin_bytes_limit_exceeded,		"bytes_limit_exceeded")
DAT(plugin_undefined_plugin_hanler,		"undefined_plugin_hanler")

DAT(runner_malformed_parameters,		"malformed_parameters")
DAT(runner_undefined_function,			"undefined_function")
DAT(runner_script_error,				"script_error")
DAT(runner_initialization_error,		"runner_initialization_error")
#endif // _DEFAULT_ERRORS

#ifdef _DEFAULT_ERROR_DESCRIPTIONS
DAT(plugin_malformed_parameters, 		"One or more of the given parameters has the wrong type.")
DAT(plugin_missing_parameter,			"One or more of the given parameters is missing.")
DAT(plugin_undefined_plugin,			"Plug-in could not be found with given plug-in id.")
DAT(plugin_server_error,				"There has been a server error.")
DAT(plugin_bytes_limit_exceeded,		"Plug-in Handler could not preload all plug-ins, because they exceed the byte limit. This limit is set for server security reasons. Contact the administrator if you need to increase the limit.")
DAT(plugin_undefined_plugin_hanler,		"Plug-in Handler could not be found with given id.")

DAT(runner_malformed_parameters, 		"One or more of the given parameters has the wrong type.")
#endif // _DEFAULT_ERROR_DESCRIPTIONS